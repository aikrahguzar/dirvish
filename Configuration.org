#+AUTHOR: Alex Lu
#+EMAIL: alexluigit@gmail.com
#+startup: content

*TL;DR*: Grab the config from [[#Example-config][Example config]]. Read following docs in-depth if you
want further customizations.

-----

** Prerequisites

|-------------------+----------------------------+----------|
| Package           | Description                | Required |
|-------------------+----------------------------+----------|
| =Emacs 27.1=        | Support Emacs 27.1 onward  | Required |
| =all-the-icons.el=  | Icon support               | Optional |
| =vscode-icon.el=    | Icon support               | Optional |
| =pdftoppm=          | Generate pdf preface image | Optional |
| =imagemagick=       | Generate image cache       | Optional |
| =ffmpegthumbnailer= | Generate video thumbnailer | Optional |
| =epub-thumbnailer=  | Generate epub thumbnailer  | Optional |
| =zipinfo=           | Preview zip files          | Optional |
| =mediainfo=         | Display media metadata     | Optional |
|-------------------+----------------------------+----------|

** Customization options

|---------------------------------+----------+--------------------------------------|
| Option                          | Type     | Description                          |
|---------------------------------+----------+--------------------------------------|
| ~dirvish-cache-dir~               | String   | Cache directory                      |
| ~dirvish-trash-dir-alist~         | Alist    | Setup multiple trash cans            |
| ~dirvish-history-length~          | Integer  | Maximum number of items in history   |
| ~dirvish-depth~                   | Integer  | Level of dirs to traverse up         |
| ~dirvish-parent-max-width~        | Float    | Max width of parent windows          |
| ~dirvish-preview-width~           | Float    | Width of preview window              |
| ~dirvish-header-style~            | Option   | Style for full-frame Dirvish header  |
| ~dirvish-header-string-function~  | Function | Default header string                |
| ~dirvish-face-remap-alist~        | Alist    | Remapping faces in Dirvish window    |
| ~dirvish-mode-line-format~        | Cons     | Mode line format in root window      |
| ~dirvish-async-listing-threshold~ | Integer  | List huge directories asynchronously |
| ~dirvish-preview-disabled-exts~   | List     | Disable preview for some filetypes   |
| ~dirvish-preview-dispatchers~     | List     | See [[#Preview-strategies][Preview strategies]]               |
| ~dirvish-attributes~              | List     | See [[#Extra-attributes][Extra attributes]]                 |
|---------------------------------+----------+--------------------------------------|
Consult the docstring of the options for details.

** Extra attributes

A list of file attributes such as ~file-size~ showing in Dirvish file lines are
stored in the variable ~dirvish-attributes~.  These attributes are defined by
~dirvish-define-attribute~, you can get all available attributes by evaluating:

#+begin_src emacs-lisp
(prog1 (mapc #'require dirvish-extra-libs) (describe-variable 'dirvish--available-attrs))
#+end_src

To change the attributes session locally, see [[#Extensions][dirvish-menu]].

** Preview strategies

A preview dispatcher represents a strategy for preview generation on certain
conditions. The variable ~dirvish-preview-dispatchers~, which holds all the active
dispatchers, has the default value looks like:

#+begin_src emacs-lisp
(text gif image video audio epub archive pdf-tools)
#+end_src

You can consult ~dirvish-preview-dispatch~ for details.
To change the preview dispatchers session locally, see [[#Extensions][dirvish-menu]].

Here are two customization examples.

*** Example 1: directory preview using ~exa~ command

Let's say you don't like the default directory preview results provided by
Dired, you can create your own previewer using ~dirvish-define-preview~:

#+begin_src emacs-lisp
(dirvish-define-preview exa (file)
  "Use `exa' to generate directory preview."
  (when (file-directory-p file) ; we only interest in directories here
    `(shell . ("exa" "--color=always" "-al" ,file)))) ; use the output of `exa' command as preview

(add-to-list 'dirvish-preview-dispatchers 'exa)
#+end_src

This makes Dirvish use the output from ~exa~ shell command as your preview content
for a directory entry. The other benefit of doing so is that Dirvish execute
shell commands asynchronously, therefore preview a huge directory won't block
the main process of Emacs.

On a side note, you can customize the corresponding =ansi-color= faces to change
the coloring in the preview window.

#+begin_src emacs-lisp
(set-face-attribute 'ansi-color-blue nil :foreground "#FFFFFF")
#+end_src

[[https://user-images.githubusercontent.com/16313743/158852998-ebf4f1f7-7e12-450d-bb34-ce04ac22309c.png][https://user-images.githubusercontent.com/16313743/158852998-ebf4f1f7-7e12-450d-bb34-ce04ac22309c.png]]
[screenshot from the ~doom-one~ theme]

*** Example 2: preview =README.md= in a project when it exists

Here we create a dispatcher to preview the =README.md= file in a directory:

#+begin_src emacs-lisp
(dirvish-define-preview readme (file)
  "Preview README.md file in a directory when it exists."
  (when (file-directory-p file)
    (let ((readme-file (expand-file-name "README.md" file)))
      (when (file-exists-p readme-file) ; when the README.md exists
        `(buffer . ,(find-file-noselect readme-file t nil)))))) ; use the file buffer as preview

(add-to-list 'dirvish-preview-dispatchers 'readme)
#+end_src

If you find it useful, you can extend this dispatcher to support "README.org" or
make it case insensitive etc.

** Hooks

|----------------------------+-----------------------------------------|
| Hook                       | Description                             |
|----------------------------+-----------------------------------------|
| ~dirvish-activation-hook~    | Hook for dirvish session activation.    |
| ~dirvish-deactivation-hook~  | Hook for dirvish session deactivation.  |
| ~dirvish-mode-hook~          | Hook for parent buffer initialization.  |
| ~dirvish-preview-setup-hook~ | Hook for preview buffer initialization. |
|----------------------------+-----------------------------------------|

** Extensions
*** Transient based help menu (dirvish-menu.el)

This extension provides help menu powered by =transient.el= for Dirvish.

~dirvish-dispatch~ is the prefix to invoke the top-level help menu, just like
~magit-dispatch~ as to =magit= (see Figure 1. in [[https://github.com/alexluigit/dirvish/#screenshots][README.org]]). The menu contains most
of the built-in Dired commands and all of the Dirvish commands. Some sub-level
prefix commands such as ~dirvish-marking-menu~ were created because it makes sense
to group together the Dired/Dirvish commands that serve similar purposes.

An interesting prefix worth mentioning is ~dirvish-setup-menu~, because it enables
users to change the setup of a session on the fly.

https://user-images.githubusercontent.com/16313743/156892360-2ec3a5e6-0de3-4ee3-b31c-dd6b19ad06ab.mp4

*Figure 5*. Compose the user interface like a breeze

The variable ~dirvish-menu-available-prefixs~ holds all available prefixs, bind
them in ~dirvish-mode-map~ if you like.

*** Multi-stage copy/pasting of files (dirvish-yank.el)

Here is a quote from [[https://github.com/Fuco1/dired-hacks][dired-ranger]] that justified the ~dired-ranger-move/paste~ commands:

#+begin_quote
A feature present in most orthodox file managers is a "two-stage" copy/paste
process. Roughly, the user first selects some files, "copies" them into a
clipboard and then pastes them to the target location. This workflow is missing
in dired.

In dired, user first marks the files, then issues the dired-do-copy command
which prompts for the destination. The files are then copied there. The
dired-dwim-target option makes this a bit friendlier---if two dired windows are
opened, the other one is automatically the default target.

With the multi-stage operations, you can gather files from multiple dired
buffers into a single "clipboard", then copy or move all of them to the target
location.
#+end_quote

The ~dirvish-yank~ command can do similar things as ~dired-ranger-move/paste~,
meanwhile, it has serveral benefits over ~dired-do-copy~ or ~dired-ranger~:

- It paste/move files using external processes, hence heavy I/O tasks won't
  block the main process of Emacs.
- It's much simpler than ~dired-ranger~ because you mark files using built-in
  Dired commands such as ~dired-mark~, ~dired-mark-extension~.
  
*** Minibuffer file preview (dirvish-peek.el)

~dirvish-peek-mode~ gives you a preview window when narrowing file candidates
using minibuffer. It displays file preview for all of the file name narrowing
commands in the same way as =dirvish= command.

https://user-images.githubusercontent.com/16313743/158052790-22e6cf49-e18e-435c-908e-f5d91ba316a6.mp4

*Figure 6.* A demo of ~find-library~ and ~find-file~ commands after ~dirvish-peek-mode~ enabled.

The ~dirvish-peek-display-alist~ option allows you to control the window placement
of the peek window.

~dirvish-peek-mode~ currently supports =vertico=, =selectrum=, =ivy= and =icomplete[-vertical]=.

*** Version-control (git) integration (dirvish-vc.el)

This extension provides:
- ~vc-state~ attribute
- ~git-msg~ attribute
- ~vc-diff~ preview dispatcher

See [[#Extensions][Figure 5]].

*** Extra commands, attributes, or preview dispatchers (dirvish-extras.el)
**** Commands

|------------------------------------+------------------------------------------|
| Command                            | Description                              |
|------------------------------------+------------------------------------------|
| ~dirvish-show-history~               | Navigate to recently visited directories |
| ~dirvish-other-buffer~               | Switch to most recent Dirvish buffer     |
| ~dirvish-find-file-true-path~        | Open the true name of symlinks           |
| ~dirvish-copy-file-name~             | Copy the file name ("foo.el")            |
| ~dirvish-copy-file-path~             | Copy the file path ("path/to/foo/bar")   |
| ~dirvish-copy-file-directory~        | Copy the parent file path                |
| ~dirvish-rename-space-to-underscore~ | Rename "foo bar.el" to "foo_bar.el"      |
| ~dirvish-roam~                       | Browse all directories using ~fd~ command  |
|------------------------------------+------------------------------------------|

**** Attributes

|----------------+------------------------------------------|
| Attribute      | Description                              |
|----------------+------------------------------------------|
| ~all-the-icons~  | File icons provided by =all-the-icons=     |
| ~vscode-icon~    | File icons provided by =vscode-icon=       |
| ~file-size~      | Human readable file size at right fringe |
| ~expanded-state~ | Directory expanded state indicator       |
|----------------+------------------------------------------|
Add either ~vscode-icon~ or ~all-the-icons~ to ~dirvish-attributes~ to show icons in
Dirvish buffer. Note that [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired-mode]], if present, is automatically
being turned off in Dirvish.  The icon solution provided by Dirvish has better
performance and integrate flawlessly with line highlighting along with other
attributes.

[[icon-comparison][https://raw.githubusercontent.com/alexluigit/binaries/main/dirvish/assets/icon-comparison.png]]

**** Customization options

|-------------------------------+---------+--------------------------------------------|
| Option                        | Type    | Description                                |
|-------------------------------+---------+--------------------------------------------|
| ~dirvish-icon-delimiter~        | String  | The delimiter between icon and filename    |
| ~dirvish-all-the-icons-height~  | Float   | Height applied to =all-the-icons=            |
| ~dirvish-all-the-icons-offset~  | Float   | Vertical offset applied to =all-the-icons=   |
| ~dirvish-all-the-icons-palette~ | Option  | Coloring style applied to =all-the-icons=    |
| ~dirvish-vscode-icon-size~      | Integer | Pixelwise size applied to =vscode-icon=      |
| ~dirvish-expanded-state-style~  | Option  | String/icon used for folder expanded state |
|-------------------------------+---------+--------------------------------------------|
*** Toggle Dirvish in side window (dirvish-side.el)

Use ~dirvish-side~ command to toggle the side Dirvish.

Customize the option ~dirvish-side-scope~ to create scoped Dirvish session with
~dirvish-side~ command. For example,

#+begin_src emacs-lisp
(customize-set-variable 'dirvish-side-scope 'perspective)
#+end_src

will make every =perspective= have an unique ~dirvish-side~ session. A valid scope
can be one of: ~emacs~, ~tab~, ~frame~, ~persp~ (see [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]]), ~perspective~ (see
[[https://github.com/nex3/perspective-el][perspective-el]]).

Customize the option ~dirvish-side-display-alist~ to change the size and position
of the window.

** Example config
*** Dired | Dirvish

#+begin_src emacs-lisp
(use-package dired
  :config
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
  (setq dired-listing-switches
        "-AGhlv --group-directories-first --time-style=long-iso"))

(use-package dired-x
  ;; Enable dired-omit-mode by default
  ;; :hook
  ;; (dired-mode . dired-omit-mode)
  :config
  ;; Make dired-omit-mode hide all "dotfiles"
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$")))

(use-package dirvish
  :custom
  (dirvish-attributes '(expanded-state all-the-icons file-size))
  ;; Maybe the icons are too big in your eyes
  ;; (dirvish-all-the-icons-height 0.8)
  (dirvish-bookmarks-alist
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  ;; List directories that has over 10000 files asynchronously
  ;; This feature is disabled by default
  ;; (dirvish-async-listing-threshold 10000)
  :config
  (dirvish-override-dired-mode)
  (dirvish-peek-mode)
  ;; In case you want the details at startup like `dired'
  ;; :hook
  ;; (dirvish-mode . (lambda () (dired-hide-details-mode -1)))
  :bind
  (:map dired-mode-map
        ("SPC" . dirvish-show-history)
        ("r"   . dirvish-roam)
        ("b"   . dirvish-goto-bookmark)
        ("f"   . dirvish-file-info-menu)
        ("M-a" . dirvish-mark-actions-menu)
        ("M-s" . dirvish-setup-menu)
        ("M-f" . dirvish-toggle-fullscreen)
        ([remap dired-summary] . dirvish-dispatch)
        ([remap dired-do-copy] . dirvish-yank)
        ([remap mode-line-other-buffer] . dirvish-other-buffer)))
#+end_src

*** Complementary packages

These packages are only listed here for discoverability.

#+begin_src emacs-lisp
;; Addtional syntax highlighting for dired
(use-package diredfl
  :hook
  (dired-mode . diredfl-mode))

;; Use `all-the-icons' as Dirvish's icon backend
(use-package all-the-icons)

;; Or, use `vscode-icon' instead
;; (use-package vscode-icon
;;   :config
;;   (push '("jpg" . "image") vscode-icon-file-alist))

(use-package dired-subtree
  :bind
  (:map dired-mode-map
        ("TAB" . dired-subtree-toggle)))

;; Narrow a dired buffer to the files matching a string.
(use-package dired-narrow
  :bind
  (:map dired-mode-map
        ("N" . dired-narrow)))

(use-package dired-filter
  :bind
  (:map dired-mode-map
        ([remap dired-omit-mode] . dired-filter-mode)))

(use-package dired-collapse
  :bind
  (:map dired-mode-map
        ("M-c" . dired-collapse-mode)))

;; Drop-in replacement for find-dired
(use-package fd-dired
  :bind
  ("C-c F" . fd-dired))
#+end_src

*** Additional notes on 3rd-party packages

The package =all-the-icons-dired= is *NOT* required at all unless you want to use
Dirvish with ~dirvish-override-dired-mode~ *disabled*. In fact, I'd advise *against*
using this package along with Dirvish, because it breaks the lazy-rendering
mechanism of Dirvish. More specifically, it retrives icons for all the files in
the directory eagerly which hangs up Emacs on large directories.

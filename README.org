#+AUTHOR: Alex Lu
#+EMAIL: alexluigit@gmail.com
#+startup: content

* *Dirvish*

[[https://melpa.org/#/dirvish][file:https://melpa.org/packages/dirvish-badge.svg]]
[[https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml][file:https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml/badge.svg]]

#+begin_quote
A minimalistic yet versatile file manager based on *Dired*.
#+end_quote

** Introduction

This package gives Dired the following features:

- Multiple window layouts
- Isolated sessions
- A modern and composable user interface

A Dired, a [[https://github.com/ranger/ranger][ranger]], a [[https://github.com/jaypei/neotree][neotree]], this is Dirvish ;)

** Screenshots

[[https://raw.githubusercontent.com/alexluigit/binaries/main/dirvish/assets/main.png][https://raw.githubusercontent.com/alexluigit/binaries/main/dirvish/assets/main.png]]
*Figure 1*. ~dirvish~: A file browser/manager with live preview

https://user-images.githubusercontent.com/16313743/156968548-cb091eb5-179d-48bd-aa3d-04add862440a.mp4

*Figure 2*. ~dirvish-dired~: A brand new Dired.

https://user-images.githubusercontent.com/16313743/156969621-c07c3e12-4762-4850-b27d-43c6f4008826.mp4

*Figure 3*. ~dirvish-side~: A "neotree" leveraging Dired.

https://user-images.githubusercontent.com/16313743/156892360-2ec3a5e6-0de3-4ee3-b31c-dd6b19ad06ab.mp4

*Figure 4*. Compose the user interface like a breeze

** Installation

Dirvish is available on [[https://melpa.org][Melpa]].

*** For =package.el= users

You can install it directly via ~package-install~ if you have melpa in your ~package-archives~.

*** For =straight.el= users

#+begin_src emacs-lisp
(straight-use-package 'dirvish)
#+end_src

*** Manual install

To install it manually, first clone this repository, then add =path/to/dirvish= to your ~load-path~.

#+begin_src emacs-lisp
(add-to-list 'load-path "/path/to/dirvish")
;; If you want the extensions as well
(add-to-list 'load-path "/path/to/dirvish/extensions")
(require 'dirvish)
#+end_src

** Quickstart

Start a Dirvish session by =M-x= ~dirvish~ or ~dirvish-dired~.

- ~dirvish-dired~ creates a session in current window (like ~dired~).
- ~dirvish~ creates a session that makes use of the whole frame (see *Figure 1*).

You can use ~dirvish-toggle-fullscreen~ command to toggle the fullscreen state of
any Dirvish session (see *Figure 2*).

Although based on Dired, Dirvish doesn't change any of your Dired config nor
rebind any keys in ~dired-mode-map~. As a result, a Dired user already knew how to
use Dirvish. (see also: [[#FAQ][How is Dirvish related to Dired?]])

It is also recommended to enable ~dirvish-override-dired-mode~, which makes all
your Dired entry commands including ~dired[-other-window/tab/frame]~ initialize or
reuse a Dirvish session automatically.

** Extensions

Several small extension packages to Dirvish are maintained in the subdirectory
extensions/. They are installed together with Dirvish if you pull the package
from MELPA, Dirvish can work properly with or without them though. These
extensions are inactive by default and can be enabled manually if desired.

Currently the following extensions come with the package:

- [[file:extensions/dirvish-side.el][dirvish-side.el]]: Toggle Dirvish in side window like [[https://github.com/jaypei/neotree][neotree]].
- [[file:extensions/dirvish-yank.el][dirvish-yank.el]]: Multi-stage copy/pasting of files.
- [[file:extensions/dirvish-menu.el][dirvish-menu.el]]: Keybindings help menu powered by =transient.el=.
- [[file:extensions/dirvish-peek.el][dirvish-peek.el]]: File preview in minibuffer.
- [[file:extensions/dirvish-vc.el][dirvish-vc.el]]: Version-control (git) integration for Dirvish.
- [[file:extensions/dirvish-extras.el][dirvish-extras.el]]: Extra commands, UI elements, preview dispatchers for Dirvish.

With these extensions it is possible to adapt Dirvish such that it matches your
preference or behaves similar to other familiar file explorers.

** Customization

See [[file:Configuration.org][Configuration.org]] (included docs for extensions).

** Related projects

Generally speaking, =dirvish= should be able to handle most of the file
exploring/managing tasks, after all it is backed by the superb Dired.  Besides,
choose =dirvish= over packages listed below gives you:
1. Unified user interface in all your file managing scenarios.
2. The ability to toggle fullscreen of any Dirvish session (see *Figure 2. 3.*)
3. Less package configs to maintain or worry about.

*** neotree

=neotree= works pretty well as a simple project explorer. But sadly, compare to
=dirvish[-side]=, this package is not built on top of Dired, which means you have
to learn or configure a different set of commands, meanwhile, it is way less
powerful as Dired/Dirvish in terms of file managing.

And, it seems that this package is not being maintained anymore (last commit at
2 years ago as of 2022).

*** treemacs

Same as =neotree=, but =treemacs= is a much more mature yet complex package. It can
even be used as a general rendering backend of any tree-like structures, you may
find this package useful when you have related needs. It might be an overkill
for simple project exploring tasks due to its complexity and huge codebase.

*** dired-sidebar

=dired-sidebar= and =dirvish-side= do almost exact the same thing: create a file
explorer at side window that leveraging the power of Dired.  =dired-sidebar= also
includes some basic integration with serveral 3rd-party packages and other small
niceties such as file watching.  =dirvish-side=, at least for now, is relatively
primitive.

*** ranger.el

See this [[https://github.com/alexluigit/dirvish/issues/10][discussion]] for more details.

** Issues

- Bugs are expected on Windows since dirvish has not been tested on it.
- *WIP*: compatibility issues with some third-party dired related packages.

Feel free to report issues.

** FAQ
*** How is Dirvish related to Dired?

A Dirvish session holds a set of buffers with ~dirvish-mode~ as its ~major-mode~. As
discussed above, since ~dirvish-mode~ is a derived mode from ~dired-mode~, most of
the Dired commands work exactly the same in a ~dirvish-mode~ buffer.

Nonetheless, Dirvish and Dired handle these aspects differently:

+ Isolated sessions ::

  Each Dirvish has its own window layout along with some other isolated niceties
  such as header string. This makes it easy for Dirvish to adapt itself towards
  different file management tasks (See [[#Screenshots][screenshots]]).

+ Buffer management ::

  =dired= command and friends create new Dired buffers, hence navigating through
  the file system using Dired always end up with a lot of Dired buffers. To
  avoid this, one can either replace ~dired-find-file~ with
  ~dired-find-alternate-file~ or enable ~dired-kill-when-opening-new-dired-buffer~
  which inhibit new buffer generation in some cases, whereas the drawbacks are:

  - It may kill Dired buffers in other windows/tabs/frames
  - The metadata such as marks, subdirs, subtrees is removed too
  - Performance issue on slow disk (think of revisiting a huge directory)

  As a comparison, each Dirvish holds its own directory/preview buffer list.
  These buffer won't get killed until the user explicitly exit this session.

+ Mode line ::

  Dirvish has its own mode-line that can be customized with
  ~dirvish-mode-line-format~, hence the ~dired-switches-in-mode-line~ option doesn't
  work in Dirvish.

*** How do I customize colorization in preview window?

See https://github.com/alexluigit/dirvish/issues/13

** Acknowledgements

This package is inspired a lot by [[https://github.com/ralesi/ranger.el][ranger.el]], thanks @ralesi for creating and
maintaining it.

The name *dirvish* is a tribute to [[https://github.com/justinmk/vim-dirvish][vim-dirvish]].
